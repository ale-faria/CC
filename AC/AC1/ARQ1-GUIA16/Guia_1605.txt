; Programa para converter um valor em BCD (Binary Coded Decimal)
; para o valor equivalente em hexadecimal.
; dado01 - Valor em BCD (endereço 8000h)
; dado02 - Resultado em hexadecimal (endereço 8001h)

    ORG 8000H      ; Início do programa na posição de memória 8000h

; Carrega o valor BCD de dado01
    LXI H, 8000H   ; Aponta H para o endereço de dado01
    MOV A, M       ; Carrega o valor de dado01 (BCD) em A

; Separa os dígitos alto (HI) e baixo (LOW)
    ANI F0H        ; Máscara para obter o dígito alto (HI)
    RRC            ; Move o HI para os bits menos significativos (divide por 16)
    RRC            ; Continua o deslocamento para obter o valor do HI
    RRC
    RRC
    MOV B, A       ; Armazena o dígito alto (HI) em B

    LXI H, 8000H   ; Volta H para o início
    MOV A, M       ; Recarrega o valor original do BCD
    ANI 0FH        ; Máscara para obter o dígito baixo (LOW)
    MOV C, A       ; Armazena o dígito baixo (LOW) em C

; Multiplica o dígito alto (HI) por 10
    MVI A, 0AH     ; Carrega 10 em A
    MOV D, B       ; Move o dígito alto (HI) para D
    CALL MULTIPLY  ; Chama a sub-rotina de multiplicação
    MOV D, A       ; O resultado da multiplicação (HI * 10) é armazenado em D

; Soma o resultado ao dígito baixo (LOW)
    MOV A, D       ; Carrega o valor de HI * 10
    ADD C          ; Soma o LOW ao valor atual
    MOV D, A       ; Armazena o resultado final (valor hexadecimal)

; Armazena o resultado em dado02
    LXI H, 8001H   ; Aponta H para o endereço de dado02
    MOV M, D       ; Armazena o resultado em dado02

; Finaliza o programa
    HLT            ; Termina a execução

; Sub-rotina de multiplicação
; Multiplica os valores em D e A, resultado em A
MULTIPLY:
    MVI B, 00H     ; Inicializa o acumulador da multiplicação em B
MULT_LOOP:
    DCR D          ; Decrementa D (contador de multiplicação)
    JZ MULT_DONE   ; Sai do loop quando D for 0
    ADD A          ; Soma o valor de A ao acumulador (multiplicação por soma sucessiva)
    JMP MULT_LOOP  ; Repete o processo
MULT_DONE:
    MOV A, B       ; Armazena o resultado final em A
    RET            ; Retorna da sub-rotina
