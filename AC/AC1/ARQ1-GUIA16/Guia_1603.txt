; Programa para calcular dado03 = dado01 % dado02 usando subtrações sucessivas.
; Dados:
; dado01 - Dividendo (endereço 8000h)
; dado02 - Divisor (endereço 8001h)
; dado03 - Resto da divisão (endereço 8002h)

    ORG 8000H      ; Início do programa na posição de memória 8000h

; Carrega os valores do dividendo (dado01) e divisor (dado02)
    LXI H, 8000H   ; Aponta para o endereço do dividendo
    MOV A, M       ; Carrega dado01 em A (dividendo)
    MOV D, A       ; Copia dado01 para o registrador D (acumulador do dividendo)
    INX H          ; Incrementa o ponteiro para o divisor
    MOV A, M       ; Carrega dado02 em A (divisor)
    MOV E, A       ; Copia dado02 para o registrador E

; Verifica se o divisor é zero
    CPI 00H        ; Compara divisor com 0
    JZ DIV_BY_ZERO ; Se divisor for 0, vai para o tratamento de erro

; Loop de subtrações sucessivas
MOD_LOOP:
    MOV A, D       ; Carrega o dividendo restante (D) em A
    CMP E          ; Compara o dividendo restante com o divisor (E)
    JC DONE        ; Se D < E, sai do loop (não pode mais subtrair)

    SUB E          ; Subtrai o divisor do dividendo restante
    MOV D, A       ; Atualiza o dividendo restante em D
    JMP MOD_LOOP   ; Repete o processo

DONE:
; Armazena o resto (dividendo restante) em 8002h
    LXI H, 8002H   ; Aponta para o endereço do resto
    MOV M, D       ; Armazena o resto (D) em 8002h

; Finaliza o programa
    HLT            ; Termina a execução

DIV_BY_ZERO:
; Tratamento de divisão por zero (opcional)
    MVI A, FFH     ; Usa FFh como código de erro para divisão por zero
    LXI H, 8002H   ; Aponta para o endereço do resto
    MOV M, A       ; Armazena o código de erro no endereço 8002h
    HLT            ; Termina a execução
